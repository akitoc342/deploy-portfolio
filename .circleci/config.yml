version: 2.1
orbs:
  python: circleci/python@2.0.3
  aws-cli: circleci/aws-cli@3.1.4
  ansible-playbook: orbss/ansible-playbook@0.0.5
  ruby: circleci/ruby@2.0.0

jobs:
  cfn-lint:
    executor: python/default
    steps:
      - checkout
      - run: pip install cfn-lint
      - run:
          name: run cfn-lint
          command: |
            cfn-lint -i W3002 -t cloudformation/*.yml
  executeCloudFormation:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_DEFAULT_REGION
      - run: 
          name: deploy Cloudformation
          command: |
            set -x
            aws cloudformation deploy --template cloudformation/lecture10VPC.yml --stack-name VPCtest
            aws cloudformation deploy --template cloudformation/lecture10SG.yml --stack-name SGtest
            aws cloudformation deploy --template cloudformation/lecture10EC2.yml --stack-name EC2test2

      
  executeAnsible:
    executor: ansible-playbook/default
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 66:73:7c:32:df:2a:c0:21:90:ab:eb:09:27:28:a7:50
      - ansible-playbook/install:
          version: '2.10.7'
      - run: 
          name: vaultpass setting
          command: |
            echo "$ANSIBLE_VAULT_PASSWORD" > env.txt
      - run: 
          name: ACCESS KEY setting
          command: |
            set -x
            echo export ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID >> $BASH_ENV
            echo export SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY >> $BASH_ENV
            source $BASH_ENV
    

  executeServerspec:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - checkout
      - ruby/install:
          version: '3.1.2'
      - attach_workspace:
          at: /tmp/workspace
      - run: cat /tmp/workspace/alb-dns.txt
      - run:
          name: executeServerspec
          command: |
            cd serverSpec
            gem install bundler
            gem install serverspec
            gem install rake
            gem install ed25519
            gem install bcrypt_pbkdf
            env ALB_DNS=$(cat /tmp/workspace/alb-dns.txt) rake spec
  build:
    machine:
      timezone: Asia/Tokyo
      ruby:
        version:
          2.1.2
      environment:
        AWS_AMI_ID: ami-06ee4e2261a4dc5c3
        AWS_INSTANCE_TYPE: t2.micro
        AWS_CF_STACK_NAME: ci-test
        SSH_USER: ec2-user
        AMI_NAME: ami-ci

    dependencies:
      pre:
        - sudo pip install ansible

    test:
      pre:
        - aws cloudformation create-stack --stack-name $AWS_CF_STACK_NAME --template-body file://ami-ci.cform --parameters ParameterKey=KeyName,ParameterValue=$AWS_KEY_NAME ParameterKey=ImageId,ParameterValue=$AWS_AMI_ID ParameterKey=InstanceType,ParameterValue=$AWS_INSTANCE_TYPE
        - aws cloudformation wait stack-create-complete --stack-name $AWS_CF_STACK_NAME
        - aws cloudformation describe-stacks --stack-name $AWS_CF_STACK_NAME | jq -r '.Stacks[].Outputs[] | select(.OutputKey == "PublicIP") | .OutputValue' > /tmp/publicip.txt
        - aws cloudformation describe-stacks --stack-name $AWS_CF_STACK_NAME | jq -r '.Stacks[].Outputs[] | select(.OutputKey == "InstanceId") | .OutputValue' > /tmp/instanceid.txt
        - echo "`cat /tmp/publicip.txt` testserver" >> /tmp/hosts.txt
        - cp /etc/hosts .
        - sudo bash -c "cat hosts /tmp/hosts.txt | tee /etc/hosts"
        - echo "Host testserver" >> ~/.ssh/config
        - echo "User $SSH_USER" >> ~/.ssh/config
        - ssh -t $SSH_USER@testserver sudo yum update -y
        - ssh -t $SSH_USER@testserver sudo yum install epel-release -y
        - ansible-playbook -i ansible/hosts ansible/nginx.yml

      override:
        - aws ec2 create-image --name $AMI_NAME-`git log -n 1 --format=%H` --instance-id `cat /tmp/instanceid.txt` | jq -r '.ImageId' > /tmp/imageid.txt
        - sleep 300
        - aws cloudformation create-stack --stack-name ${AWS_CF_STACK_NAME}-2 --template-body file://ami-ci.cform --parameters ParameterKey=KeyName,ParameterValue=$AWS_KEY_NAME ParameterKey=ImageId,ParameterValue=`cat /tmp/imageid.txt` ParameterKey=InstanceType,ParameterValue=$AWS_INSTANCE_TYPE
        - aws cloudformation wait stack-create-complete --stack-name ${AWS_CF_STACK_NAME}-2
        - aws cloudformation describe-stacks --stack-name ${AWS_CF_STACK_NAME}-2 | jq -r '.Stacks[].Outputs[] | select(.OutputKey == "PublicIP") | .OutputValue' > /tmp/publicip.txt
        - echo "`cat /tmp/publicip.txt` amitestserver" >> /tmp/hosts2.txt
        - cp /etc/hosts .
        - sudo bash -c "cat hosts /tmp/hosts2.txt | tee /etc/hosts"
        - echo "Host amitestserver" >> ~/.ssh/config
        - echo "User $SSH_USER" >> ~/.ssh/config
        - bundle exec rake spec:amitestserver
      post:
        - aws cloudformation delete-stack --stack-name $AWS_CF_STACK_NAME
        - aws cloudformation delete-stack --stack-name ${AWS_CF_STACK_NAME}-2
        - aws ec2 create-tags --resources `cat /tmp/imageid.txt` --tags Key=commitId,Value=`git log -n 1 --format=%H` Key=Name,Value=ami-ci-`git log -n 1 --format=%H` Key=Name,Value=$AMI_NAME


workflows:
  raisetech:
    jobs:
      - cfn-lint
      - executeCloudFormation:
          requires:
            - cfn-lint
      - executeAnsible:
          requires:
            - executeCloudFormation
      - executeServerspec:
          requires:
            - executeAnsible
      - build:
          requires:
            - executeServerspec